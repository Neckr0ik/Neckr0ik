# -*- mode: ruby -*-
# vi: set ft=ruby :

# Linux Security Lab Environment
# Author: Giovanni Oliveira
# Description: Vagrant configuration for hands-on Linux security learning

Vagrant.configure("2") do |config|
  # Base box configuration
  config.vm.box = "ubuntu/focal64"
  config.vm.box_version = "20231215.0.0"
  
  # VM configuration
  config.vm.hostname = "linux-security-lab"
  
  # Network configuration
  config.vm.network "private_network", ip: "192.168.56.10"
  config.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh"
  config.vm.network "forwarded_port", guest: 80, host: 8080, id: "web"
  config.vm.network "forwarded_port", guest: 443, host: 8443, id: "web-ssl"
  
  # Shared folders
  config.vm.synced_folder ".", "/vagrant", disabled: false
  config.vm.synced_folder "./lab-exercises", "/home/vagrant/lab-exercises", 
    owner: "vagrant", group: "vagrant", mount_options: ["dmode=755,fmode=644"]
  
  # VirtualBox provider configuration
  config.vm.provider "virtualbox" do |vb|
    vb.name = "Linux-Security-Lab"
    vb.memory = "2048"
    vb.cpus = 2
    vb.gui = false
    
    # Enable nested virtualization if supported
    vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    
    # Network adapter configuration
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end
  
  # Provisioning script
  config.vm.provision "shell", inline: <<-SHELL
    # Update system packages
    apt-get update
    apt-get upgrade -y
    
    # Install essential packages
    apt-get install -y \
      curl \
      wget \
      vim \
      nano \
      htop \
      tree \
      unzip \
      git \
      net-tools \
      nmap \
      tcpdump \
      wireshark-common \
      fail2ban \
      ufw \
      lynis \
      chkrootkit \
      aide \
      apache2 \
      mysql-server \
      openssh-server \
      rsyslog \
      logrotate \
      cron
    
    # Configure SSH for security
    sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
    sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
    systemctl restart ssh
    
    # Configure firewall (UFW)
    ufw --force reset
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw --force enable
    
    # Configure Apache web server
    systemctl enable apache2
    systemctl start apache2
    
    # Create lab welcome page
    cat > /var/www/html/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Linux Security Lab</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { color: #2c3e50; border-bottom: 2px solid #3498db; }
        .status { background: #ecf0f1; padding: 20px; border-radius: 5px; }
        .success { color: #27ae60; }
        .warning { color: #f39c12; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîí Linux Security Lab Environment</h1>
        <p>Welcome to the hands-on Linux security learning environment!</p>
    </div>
    
    <div class="status">
        <h2>Lab Status</h2>
        <p class="success">‚úÖ Lab environment is ready</p>
        <p class="success">‚úÖ Web server is running</p>
        <p class="success">‚úÖ SSH access is configured</p>
        <p class="warning">‚ö†Ô∏è Remember to follow security best practices</p>
    </div>
    
    <h2>Getting Started</h2>
    <ol>
        <li>SSH into the lab: <code>vagrant ssh</code></li>
        <li>Navigate to exercises: <code>cd /home/vagrant/lab-exercises</code></li>
        <li>Start with: <code>./start-lab.sh</code></li>
    </ol>
    
    <h2>Lab Exercises</h2>
    <ul>
        <li>01-file-permissions: File permissions and ownership</li>
        <li>02-user-management: User and group administration</li>
        <li>03-network-security: Network security configuration</li>
        <li>04-monitoring: System monitoring and logging</li>
        <li>05-hardening: Comprehensive security hardening</li>
    </ul>
    
    <p><strong>Author:</strong> Giovanni Oliveira | <strong>Project:</strong> Digital-Forge</p>
</body>
</html>
EOF
    
    # Configure MySQL (secure installation simulation)
    mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'LabPassword123!';"
    mysql -e "DELETE FROM mysql.user WHERE User='';"
    mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
    mysql -e "DROP DATABASE IF EXISTS test;"
    mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
    mysql -e "FLUSH PRIVILEGES;"
    
    # Create lab users for exercises
    useradd -m -s /bin/bash labuser1
    useradd -m -s /bin/bash labuser2
    useradd -m -s /bin/bash labuser3
    echo "labuser1:password123" | chpasswd
    echo "labuser2:password123" | chpasswd
    echo "labuser3:password123" | chpasswd
    
    # Create lab groups
    groupadd developers
    groupadd analysts
    groupadd administrators
    
    # Add users to groups
    usermod -a -G developers labuser1
    usermod -a -G analysts labuser2
    usermod -a -G administrators labuser3
    
    # Configure sudo access for lab exercises
    echo "labuser3 ALL=(ALL:ALL) ALL" >> /etc/sudoers.d/lab-users
    
    # Create lab directory structure
    mkdir -p /home/vagrant/lab-exercises
    chown -R vagrant:vagrant /home/vagrant/lab-exercises
    
    # Set up log monitoring
    systemctl enable rsyslog
    systemctl start rsyslog
    
    # Configure log rotation
    cat > /etc/logrotate.d/lab-logs << 'EOF'
/var/log/lab/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 root root
}
EOF
    
    # Create lab log directory
    mkdir -p /var/log/lab
    
    # Install additional security tools
    wget -O /tmp/lynis.tar.gz https://downloads.cisofy.com/lynis/lynis-3.0.8.tar.gz
    tar -xzf /tmp/lynis.tar.gz -C /opt/
    ln -s /opt/lynis/lynis /usr/local/bin/lynis
    
    # Configure AIDE (file integrity monitoring)
    aideinit
    mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    
    # Set up cron jobs for security monitoring
    cat > /etc/cron.daily/security-check << 'EOF'
#!/bin/bash
# Daily security check script
echo "$(date): Running daily security check" >> /var/log/lab/security-check.log
lynis audit system --quiet >> /var/log/lab/lynis-audit.log 2>&1
chkrootkit >> /var/log/lab/rootkit-check.log 2>&1
EOF
    chmod +x /etc/cron.daily/security-check
    
    # Final system update and cleanup
    apt-get autoremove -y
    apt-get autoclean
    
    # Display completion message
    echo "=================================================="
    echo "Linux Security Lab Environment Setup Complete!"
    echo "=================================================="
    echo "Lab VM IP: 192.168.56.10"
    echo "Web Interface: http://localhost:8080"
    echo "SSH Access: vagrant ssh"
    echo "Lab Exercises: /home/vagrant/lab-exercises"
    echo "=================================================="
  SHELL
  
  # Post-provisioning message
  config.vm.post_up_message = <<-MSG
    üîí Linux Security Lab is ready!
    
    Access methods:
    ‚Ä¢ SSH: vagrant ssh
    ‚Ä¢ Web: http://localhost:8080
    ‚Ä¢ Lab exercises: cd /home/vagrant/lab-exercises
    
    Start learning: ./start-lab.sh
  MSG
end